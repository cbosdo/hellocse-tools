#!/usr/bin/python3
import csv
import click
import datetime
import sys

def load_employees(path):
    """
    Load the hello CSE CSV export file into dictionaries
    """
    with open(path, newline="", encoding='utf_8_sig') as csvfile:
        reader = csv.DictReader(csvfile, delimiter=";")
        data = []
        children_birthdates_headers = [f for f in reader.fieldnames if f.startswith("Date de naissance enfant")]
        for row in reader:
            data.append({
                "Prénom": row["Prénom"],
                "Nom de famille": row["Nom"],
                "Adresse e-mail": row["Email"],
                "Identifiant": row["Identifiant"],
                "Matricule": row["Matricule"],
            })

            children_birthdates = [row[header] for header in children_birthdates_headers if row[header]]
            children_rows = [{
                "Prénom": row["Prénom"],
                "Nom de famille": row["Nom"],
                "Adresse e-mail": row["Email"],
                "Identifiant": row["Identifiant"],
                "Matricule": row["Matricule"],
                "Date de naissance enfant": datetime.date.fromisoformat(d)
                } for d in children_birthdates]
            data += children_rows
        return data


def print_csv(headers, data):
    """
    Print the data as semi-colon separated CSV to stdout
    """
    writer = csv.DictWriter(sys.stdout, headers, delimiter=";")
    writer.writeheader()
    writer.writerows(data)


@click.group()
@click.argument(
    "path",
    nargs=1,
    type=click.Path(exists=True, file_okay=True, dir_okay=False, readable=True),
)
@click.pass_context
def cli(ctx, path):
    ctx.obj = path


@cli.command()
@click.pass_context
def list(ctx):
    data = load_employees(ctx.obj)
    print_csv(["Prénom", "Nom de famille", "Adresse e-mail", "Date de naissance enfant"], data)


@cli.command()
@click.option("--employee", default=170, help="Amount of christmas checks per employee")
@click.option("--child", default=60, help="Amount of christmas checks per child")
@click.pass_context
def xmas(ctx, employee, child):
    """
    Do the the data comparison and output the results
    """
    employees = load_employees(ctx.obj)

    checks = []
    this_year = datetime.date.today().year
    for row in employees:
        birthdate = row.pop("Date de naissance enfant", None)
        row["Quantité"] = 1
        if birthdate is None:
            row["Montant Noël"] = employee
            checks.append(row)
        elif this_year - birthdate.year <= 16:
            row["Montant Noël enfants"] = child
            checks.append(row)

    fieldnames = [
        "Matricule",
        "Adresse e-mail",
        "Identifiant",
        "Nom de famille",
        "Prénom",
        "Date d'activation",
        "Quantité",
        "Montant Noël",
        "Montant Noël enfants",
    ]
    print_csv(fieldnames, checks)


if __name__ == "__main__":
    cli()
